.father {
  /*
  lesson #1.1

  flexbox는 레이아웃을 할때 마진, 위치같은 자식의 요소들을 사용하지 않는다.

  flexbox는 레이아웃을 위해 flex container를 만들어야 한다. 
  flex container는 다음과 같이 display 속성을 flex로 설정하면 된다.
  */
  display: flex;

  /*
  lesson #1.2

  flexbox 의 기본 flex-direction 은 row 이다. 

  justify-content 는 정렬축(main axis)을 기준으로 자식의 위치를 변경한다.
  align-items 는 교차축(cross axis)을 기준으로 자식의 위치를 변경한다.
  */
  justify-content: space-evenly;
  align-items: flex-start;
  height: 100vh;

  /*
  lesson #1.3

  flex-direction 이 column 이 되면 세로축이 정렬축이 되고 가로축이 교차축이 된다.
  */

  /* flex-direction: column; */

  /*
  lesson #1.5

  flexbox 는 기본적으로 모든 아이템을 한 라인에 몰아넣는다. 
  flex-wrap 속성을 nowrap 에서 wrap 으로 바꿔주면 자식들의 크기가 유지되고, 넘치는 자식들을 다음 라인으로 넘긴다.
  wrap-reverse 속성으로 정렬 순서를 바꿀 수 있다.

  align-content 속성을 설정하면 정렬축이 여러개일 때 정렬축의 위치를 설정할 수 있다.
  */
  flex-wrap: nowrap;
  align-content: space-between;
}

.child {
  /* 
  lesson #1.0

  inline은 box가 아니라서 width, height를 지정할 수 없다. 
  inline요소는 내부 컨텐츠에 따라 유동적으로 크기가 변한다.

  inline-block은 한 줄에 얼라인되는 inline의 속성과 box형태로 크기를 지정하는 block의 속성을 모두 가지고 있다.
  */
  width: 200px;
  height: 200px;
  background: peru;
  color: white;
  font-size: 40px;
}

.child:nth-child(2) {
  /*
  lesson #1.4

  align-self 속성을 이용하면 flexbox 안의 개별 자식들의 교차축 위치를 설정할 수 있다.
  
  order 속성을 이용하면 자식의 정렬 순서를 바꿀 수 있다. 기본깂은 0이고 숫자가 커질수록 뒤에 위치한다.
  order 속성에 주는 숫자가 몇 번째 인덱스인지를 알려주는것은 아니다. 기본적으로 모든 자식들은 order 속성이 0으로 
  설정되어 있다.
  */

  /*
  align-self: center;
  order: 1;
  */

  /*
  lesson #1.6

  부모의 wrap 방식이 nowrap 일때 자식은 공간이 부족하면 크기가 줄어든다.
  flex-shrink 속성을 설정하면 크기가 줄어드는 비율을 설정할 수 있다.
  기본이 1이고, 2면 2배, 3이면 3배 더 줄어든다.

  flex-grow 속성은 남는 공간이 있을 때 그 공간을 얼마만큼의 비율로 차지할 것인지를 정한다.
  기본은 0으로 되어 있으므로 남는 공간이 생겨도 크기가 변하지 않는다. 
  만약 flex-grow 가 1이상인 자식이 여러개 있어도 공간을 추가로 차지하지 않는다. 대신 각각의 값 비율에 따라 남는
  공간을 나눠가진다.
  */
  background-color: black;
  flex-shrink: 3;
  flex-grow: 1;
}
