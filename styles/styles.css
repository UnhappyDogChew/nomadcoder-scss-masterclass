/*
lesson #2.1

flexbox 로는 grid 를 만들기가 어렵다. 그러니 grid 를 쓰자!
*/

.father {
  /*
  lesson #2.2
  
  grid-template-columns 와 grid-template-rows 속성으로 각각의 column, row 의 크기가 얼마나 
  될지 설정할 수 있다.

  column-gap, row-gap 으로 각 column, row 사이의 간격을 설정할 수 있다.
  gap 속성을 이용하면 양쪽 모두에 공통적으로 적용되는 간격을 설정할 수 있다.
  */
  display: grid;
  grid-template-columns: 30% 30% 30%;
  gap: 10px;
}

.child {
  flex-basis: 30%;
  background: peru;
  color: white;
  display: flex;
  justify-content: center;
  font-size: 18px;
}

/*
lesson #2.3

grid-template-areas 속성을 이용하면 그리드 안에 자식들이 위치할 영역을 시각화하서 설정할 수 있다.
각 자식들에게 grid-area 속성으로 이름을 부여한 후, 그리드 테이블의 각 셀이 어떤 자식의 영역이 될지
스트링 형태로 표현해주면 된다.
grid-area 속성은 스트링 값이 아닌 직접 영역의 이름을 주어야 함에 유의한다.

영역을 박스 형태로 나타낼 수 없으면 제대로 표시되지 않으니 주의하자.

area 이름 대신 - 을 넣으면 빈 영역이 된다.

속성을 설정할 때 반복되는 값을 계속 써 줘야 하는 경우에는 repeate() 함수를 이용하면된다.
예) repeat(4, 200px) -> 200px 200px 200px 200px
*/
.grid {
  display: grid;
  grid-template-columns: repeat(4, 100px);
  grid-template-rows: repeat(4, 100px);
  gap: 10px;
}

/*
lesson #2.4 

grid-template-areas 를 이용하는 대신 각각의 자식들이 어느 위치에서 시작해서 어느 위치에서 끝날지 설정할 수도 있다.
grid-column-start, grid-column-end, grid-row-start, grid-row-end 속성을 이용하면 된다.
주의할 점은 for문을 사용할 때 처럼 시작은 inclusive인 반면 끝은 exclusive라는 것이다.
*/
.header {
  background: #2ecc71;
  grid-column-start: 1;
  grid-column-end: 5;
}

.content {
  background: #2e7dcc;
  grid-column-start: 1;
  grid-column-end: 4;
  grid-row-start: 2;
  grid-row-end: 4;
}

.sidebar {
  background: #7d2ecc;
  grid-column-start: 4;
  grid-column-end: 5;
  grid-row-start: 2;
  grid-row-end: 4;
}

.footer {
  background: #cc7d2e;
  grid-column-start: 1;
  grid-column-end: 5;
}
