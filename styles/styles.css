/*
lesson #2.1

flexbox 로는 grid 를 만들기가 어렵다. 그러니 grid 를 쓰자!
*/

.father {
  /*
  lesson #2.2
  
  grid-template-columns 와 grid-template-rows 속성으로 각각의 column, row 의 크기가 얼마나 
  될지 설정할 수 있다.

  column-gap, row-gap 으로 각 column, row 사이의 간격을 설정할 수 있다.
  gap 속성을 이용하면 양쪽 모두에 공통적으로 적용되는 간격을 설정할 수 있다.
  */
  display: grid;
  grid-template-columns: 30% 30% 30%;
  gap: 10px;
}

.child {
  flex-basis: 30%;
  background: peru;
  color: white;
  display: flex;
  justify-content: center;
  font-size: 18px;
}

/*
lesson #2.3

grid-template-areas 속성을 이용하면 그리드 안에 자식들이 위치할 영역을 시각화하서 설정할 수 있다.
각 자식들에게 grid-area 속성으로 이름을 부여한 후, 그리드 테이블의 각 셀이 어떤 자식의 영역이 될지
스트링 형태로 표현해주면 된다.
grid-area 속성은 스트링 값이 아닌 직접 영역의 이름을 주어야 함에 유의한다.

영역을 박스 형태로 나타낼 수 없으면 제대로 표시되지 않으니 주의하자.

area 이름 대신 - 을 넣으면 빈 영역이 된다.

속성을 설정할 때 반복되는 값을 계속 써 줘야 하는 경우에는 repeate() 함수를 이용하면된다.
예) repeat(4, 200px) -> 200px 200px 200px 200px
*/

/*
lesson #2.6

grid-template 을 설정할 때 라인에 이름을 붙여주고 그 이름을 자식의 영역을 지정할 때 사용할 수 있다.
*/

/*
lesson #2.7

각 셀의 크기로 fr(fraction) 값을 넣어주면 비율에 맞게 크기를 채워준다.

grid-template 속성은 그리드 템플릿을 설정하는 모든 속성을 한번에 설정할 수 있는 숏컷이다.
* 주의: repeat()함수를 사용할 수 없다.
*/

/*
lesson #2.8

justify-items, align-items 로 각 셀 안의 자식들의 위치를 변경해줄 수 있다. 기본으로는 둘다 stretch 이다.
정렬축이 row 라고 생각하고 flexbox 와 같은 방식으로 작동한다.

place-items 는 두 가지를 합친 숏컷이다. align -> justify 순이다.

* 여담 *
justify 는 정렬축에 대해, align 은 교차축에 대한 것이고,
content 는 여러 아이템에 대해, items 는 각각의 개별 아이템에 대해 정렬하는 것을 의미한다고 생각하면 될것같다.
justify-content 는 정렬축의 여러 아이템의 위치를 결정하는 것이고,
align-items 는 각각의 아이템에 대해 교차축 위치를 결정하는 것이다.
align-content 는 교차축의 여러 아이템을 정렬하는 것이다. 그래서 flexbox가 여러 줄일 때 각 줄의 교차축 위치를 
결정할 때 쓰인다.
그렇다면 justify-items 는 정렬축에 대해 각각의 아이템의 위치를 결정하는 것이 된다.
*/

/*
lesson #2.9

justify-content 와 align-content 로 각각의 아이템이 아닌 전체 column 과 row 의 위치를 조정할 수 있다.

place-content 는 두 개를 동시에 설정하는 솟컷이다. 마찬가지로 align -> justify 순이다.
*/

/*
lesson #2.10

grid 의 아이템이 원래 지정해줬던 범위를 넘어서게 되면 원하는대로 grid 가 그려지지 않게된다.
이럴때 grid-auto-rows, grid-auto-columns 를 지정해주면 아이템의 갯수에 따라 column 과 row 의 수를 
동적으로 결정해준다.

grid-template-columns 를 설정한 뒤 grid-auto-columns 를 설정하면 원래 지정한 범위를 넘어선 아이템들에
대해서만 grid-auto-columns 의 값을 적용한다.

원래 지정해줬던 셀의 양을 넘어서는 아이템이 주어지면 자동으로 row 를 추가해서 아이템들을 담는다. 그 이유는 
grid-auto-flow 가 기본적으로 row 로 설정되어있기 때문이다. 이 속성을 column 으로 바꾸면 새 아이템이
추가될 때마다 column 을 추가하게 되고, 아이템의 순서도 첫 column 부터 차는 순서로 바뀌게 된다.
*/

/*
lesson #2.11

minmax() 함수로 최소크기와 최대크기를 지정해줄 수 있다.
*/

/*
lesson #2.13

column 의 크기를 그 안의 컨텐츠의 크기에 따라서 바꾸고 싶을 때, min-content 와 max-content 를 사용할 수 
있다. 반응형 웹에서 컨텐츠를 보존하고 싶을 때 사용한다.
- min-content 컨텐츠가 들어갈 수 있는 최소한의 크기로 줄어든다.
- max-content 컨텐츠가 더 이상 커지지 않을 때 까지 커진다.
*/
.grid {
  display: grid;
  gap: 8px;
  grid-template-columns: max-content min-content;
  grid-auto-rows: 100px;
}

/*
lesson #2.12

* 여담 *
repeat() 함수는 모든 곳에서 범용적으로 사용할 수 있는 함수가 아니라 grid 의 column, row 갯수를 지정할 때 
사용하는 국소적 역할을 하는 함수이다. 
minmax()도 마찬가지로 grid 에만 쓰이는 함수이다.

repeat() 함수에서 column 과 row 의 갯수를 자동으로 지정하기 위한 값으로 auto-fill 과 auto-fit 이 있다.
- auto-fill 은 공간이 남았을 때 가능한 많은 column 또는 row 를 추가한다. 
- auto-fit 은 공간이 남았을 때 최대한 column 또는 row 의 크기를 키운다.
  ? auto-fit 은 minmax() 함수와 같이 사용하지 않으면 의미가 없는것같다. auto를 한번 줘봤는데, 무조건 전체 영역을
    다 차지하게된다.
*/
.grid:first-child {
  /* grid-template-columns: repeat(auto-fill, minmax(100px, 1fr)); */
}

.grid:nth-child(2) {
  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
}

/*
lesson #2.4 

grid-template-areas 를 이용하는 대신 각각의 자식들이 어느 위치에서 시작해서 어느 위치에서 끝날지 설정할 수도 있다.
grid-column-start, grid-column-end, grid-row-start, grid-row-end 속성을 이용하면 된다.
주의할 점은 for문을 사용할 때 처럼 시작은 inclusive인 반면 끝은 exclusive라는 것이다.
*/

/*
lesson #2.5

start 와 end 를 각각 따로 써 줘야 하는 것은 번거롭다. 그래서 grid-column: 1 / 5 와 같이 줄여쓸 수 있다.
마지막값에 -1을 적으면 시작점부터 끝까지 영역을 차지한다는 의미이다. -2는 끝에서 첫번째 칸 전까지 영역을 차지한다는
의미이다.

span 4 는 4개의 셀을 차지한다는 의미이다.
span 을 지정할 때 시작점을 지정하려면 1 / span 3 와 같이 지정해주면 된다.
*/
.header {
  background: #2ecc71;
}

/*
lesson #2.10

align-self, justify-self 도 가능하다. 둘을 합친 것은 역시 place-self 이다.
*/
.content {
  background: #2e7dcc;
  place-self: center end;
}

.sidebar {
  background: #7d2ecc;
}

.footer {
  background: #cc7d2e;
}

div {
  color: white;
  padding: 8px;
}

.item:nth-child(odd) {
  background: #2ecc71;
}

.item:nth-child(even) {
  background: #2e7dcc;
}
